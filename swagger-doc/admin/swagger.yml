openapi: '3.0.2'
info:
  title: Job-Finder admin API
  version: '1.0'
servers:
  - url: http://localhost:3000
    description: Local Development API
  - url: https://staging.api.server.com
    description: Staging API

components:
  securitySchemes:
    bearerAuth:
      description: '#### Example: Bearer [TOKEN]'
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    unprocessableEntityResponse:
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid email or password combination
    conflictResponse:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "Resource with the provided name already exists."
    notFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              message:
                type: string
                example: "The requested resource was not found."
    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred while processing the request"
    UnauthorizedResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: "Unauthorized - Invalid or missing token"

paths:
  /auth/login:
    post:
      summary: Admin login
      description: Login an admin with email and password to get a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jobfinder@admin.com
                password:
                  type: string
                  format: password
                  example: jobfinder
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid request data
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid email or password
        '500':
          description: Unable to login due to a server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unable to login

  /category/add:
    post:
      summary: Add a new category
      description: This API allows adding a new category. If the category already exists, it returns an error message.
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Electronics
                  description: Name of the category to be added.
              required:
                - name
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully category created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Category already exist!                
      security:
        - bearerAuth: []

  /category/list:
    get:
      summary: Get a list of categories
      description: This API retrieves a list of categories with optional search and pagination functionality.
      tags:
        - Category
      parameters:
        - name: search
          in: query
          description: Filter categories by name (case-insensitive).
          required: false
          schema:
            type: string
            example: Electronics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Electronics
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      perPage:
                        type: integer
                        example: 10
                      currentPage:
                        type: integer
                        example: 1
                      lastPage:
                        type: integer
                        example: 10
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid parameters
      security:
        - bearerAuth: []       

  /category/edit/{id}:
    put:
      summary: Edit an existing category
      description: This API allows updating the name of an existing category. It checks if the category exists and ensures the new name is not already in use by another category.
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: ID of the category to be updated.
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Electronics
                  description: The new name for the category.
              required:
                - name
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category updated!
        '400':
          description: Validation error or category name conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: category name already exists choose another one!
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Category not found
      security:
        - bearerAuth: []          

  /category/delete/{id}:
    delete:
      summary: Delete a category
      description: This API allows deleting an existing category by its ID. If the category does not exist, an error message is returned.
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: ID of the category to be deleted.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: category id not found                
      security:
        - bearerAuth: []  

  /blog/add:
    post:
      summary: Add a new blog
      description: This API allows adding a new blog. If the blog already exists, it returns an error message.
      tags:
        - Blog
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Blog
                  description: Name of the blog to be added.
                image:
                  type: string
                  format: binary
                  description: The blog file to be uploaded.
                description:
                  type: string
                  example: Blog Description
                  description: Description of the blog to be added.
                authorname:
                  type: string
                  example: XYZ
                  description: Authorname of the blog to be added.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: successfully blog created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Blog already exist!                
      security:
        - bearerAuth: []

  /blog/list:
    get:
      summary: Get a list of categories
      description: This API retrieves a list of categories with optional search and pagination functionality.
      tags:
        - Blog
      parameters:
        - name: search
          in: query
          description: Filter categories by name (case-insensitive).
          required: false
          schema:
            type: string
            example: Electronics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Electronics
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      perPage:
                        type: integer
                        example: 10
                      currentPage:
                        type: integer
                        example: 1
                      lastPage:
                        type: integer
                        example: 10
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid parameters
      security:
        - bearerAuth: []       

  /blog/edit/{id}:
    put:
      summary: Edit an existing blog
      description: This API allows updating the name of an existing blog. It checks if the blog exists and ensures the new name is not already in use by another blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: ID of the blog to be updated.
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Blog
                  description: Name of the blog to be added.
                image:
                  type: string
                  format: binary
                  description: The blog file to be uploaded.
                description:
                  type: string
                  example: Blog Description
                  description: Description of the blog to be added.
                authorname:
                  type: string
                  example: XYZ
                  description: Authorname of the blog to be added.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Blog updated!
        '400':
          description: Validation error or blog name conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: blog name already exists choose another one!
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Blog not found
      security:
        - bearerAuth: []          

  /blog/delete/{id}:
    delete:
      summary: Delete a blog
      description: This API allows deleting an existing blog by its ID. If the blog does not exist, an error message is returned.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: ID of the blog to be deleted.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Blog deleted successfully
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: blog id not found                
      security:
        - bearerAuth: []  

  /job/add:
    post:
      summary: Add a new job
      description: Adds a new job to the database with the provided title, description, and category ID.
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the job
                  example: "Software Developer"
                description:
                  type: string
                  description: Detailed description of the job
                  example: "Develop and maintain software applications."
                companyName:
                  type: string
                  description: companyName of the job
                  example: "companyName."
                url:
                  type: string
                  description: Optional URL for the job posting 
                  example: https://techcorp.com/jobs/software-developer
                  nullable: true                  
                category:
                  type: integer
                  description: ID of the category the job belongs to
                  example: 1
              required:
                - title
                - description
                - category
                - companyName
      responses:
        '200':
          description: Job added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Job added successfully"
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation error: Missing required fields"
        '404':
          description: Category ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Category ID does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal Server Error"       
      security:
        - bearerAuth: []                

  /job/list:
    get:
      summary: Get a list of jobs
      description: Fetches a list of all jobs from the database.
      tags:
        - Job
      responses:
        '200':
          description: List of jobs fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Jobs fetched successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: "Software Developer"
                        description:
                          type: string
                          example: "Develop and maintain software applications."
                        categoryId:
                          type: integer
                          example: 2
                        companyName:
                          type: string
                          example: "companyName."        
                        url:
                          type: string
                          example: "https://techcorp.com/jobs/software-developer"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal Server Error"
      security:
        - bearerAuth: []  

  /job/delete/{id}:
    delete:
      summary: Delete a category
      description: Deletes a category by its ID.
      tags:
        - Job
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category to delete.
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Category deleted successfully"
        '404':
          description: Category ID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "category id not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal Server Error"        
      security:
        - bearerAuth: []                      

  /job/edit/{id}:
    put:
      summary: Edit an existing job
      description: Updates the details of an existing job with the provided title, description, and category ID.
      tags:
        - Job
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the job to edit.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the job
                  example: "Senior Software Engineer"
                description:
                  type: string
                  description: The description of the job
                  example: "Responsible for leading the software development team."
                companyName:
                  type: string
                  description: companyName of the job
                  example: "companyName."       
                url:
                  type: string
                  description: Optional URL for the job posting 
                  example: https://techcorp.com/jobs/software-developer                
                category:
                  type: integer
                  description: The category ID of the job
                  example: 2    
              required:
                - title
                - description
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Job updated successfully"
        '400':
          description: Invalid request body or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation error: Missing required fields or invalid data"
        '404':
          description: Job not found or category ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Job not found or Category ID does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal Server Error"       
      security:
        - bearerAuth: []                         

  /contact-us/list:
    get:
      summary: Retrieve contact requests
      description: API to fetch a list of all contact requests submitted via the contact-us form.
      tags:
        - Contact Us
      responses:
        200:
          description: Successfully retrieved the list of contact requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          description: Unique ID of the contact request.
                        name:
                          type: string
                          example: John Doe
                          description: Full name of the user.
                        email:
                          type: string
                          format: email
                          example: johndoe@example.com
                          description: Email address of the user.
                        subject:
                          type: string
                          example: Inquiry about services
                          description: Subject of the message.
                        message:
                          type: string
                          example: I would like to know more about your services.
                          description: Detailed message from the user.
                        created_at:
                          type: string
                          format: date-time
                          example: 2024-08-24T10:00:00Z
                          description: Timestamp when the contact request was submitted.
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unable to fetch contact requests
      security:
        - bearerAuth: [] 

  /subscribe/list:
    get:
      summary: Get subscriber list
      description: Retrieve a list of all subscribers.
      tags:
        - Subscription
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-01-17T12:34:56Z"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-01-17T12:34:56Z"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Something went wrong, can't get subscribers"
      security:
        - bearerAuth: [] 

  /auth/dashboard:
    get:
      summary: Get dashboard counts
      description: Fetch the count of categories and jobs for the admin dashboard.
      tags:
        - Admin
      responses:
        "200":
          description: Dashboard counts fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Dashboard counts fetched successfully"
                  data:
                    type: object
                    properties:
                      categoryCount:
                        type: integer
                        example: 15
                        description: The total number of categories.
                      jobCount:
                        type: integer
                        example: 42
                        description: The total number of jobs.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Can't get dashboard count"
      security:
        - bearerAuth: [] 

  /job/job-seekers/{jobId}:
    get:
      summary: Get job seekers for a specific job
      description: Retrieve a list of job seekers who applied for a specific job using its Job ID.
      tags:
        - Job
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: integer
          description: The ID of the job.
          example: 123
      responses:
        "200":
          description: Job seekers fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Jobseekers fetched successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        firstName:
                          type: string
                          example: "John"
                        lastName:
                          type: string
                          example: "Doe"
                        email:
                          type: string
                          format: email
                          example: "john.doe@example.com"
                        phone:
                          type: string
                          example: "+1234567890"
                        gender:
                          type: string
                          example: "Male"
                        resume:
                          type: string
                          example: "/upload/resume123.pdf"
        "400":
          description: Job ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Job ID is required"
        "404":
          description: Job ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Job ID does not exist"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Something went wrong, can't get jobseekers"
      security:
        - bearerAuth: [] 